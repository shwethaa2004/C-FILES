#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 10

typedef struct {
    int vertex;
    int distance;
} Node;

typedef struct {
    int num_vertices;
    int num_edges;
    int* adjacency_matrix;
} Graph;

void dijkstra(Graph* graph, int start_vertex) {
    int* distances = (int*)malloc(graph->num_vertices * sizeof(int));
    int* previous = (int*)malloc(graph->num_vertices * sizeof(int));
    int* visited = (int*)malloc(graph->num_vertices * sizeof(int));

    for (int i = 0; i < graph->num_vertices; i++) {
        distances[i] = INT_MAX;
        previous[i] = -1;
        visited[i] = 0;
    }

    distances[start_vertex] = 0;

    for (int i = 0; i < graph->num_vertices; i++) {
        int min_distance = INT_MAX;
        int min_vertex = -1;

        for (int j = 0; j < graph->num_vertices; j++) {
            if (!visited[j] && distances[j] < min_distance) {
                min_distance = distances[j];
                min_vertex = j;
            }
        }

        visited[min_vertex] = 1;

        for (int j = 0; j < graph->num_vertices; j++) {
            if (graph->adjacency_matrix[min_vertex * graph->num_vertices + j] != 0 && !visited[j]) {
                int new_distance = distances[min_vertex] + graph->adjacency_matrix[min_vertex * graph->num_vertices + j];

                if (new_distance < distances[j]) {
                    distances[j] = new_distance;
                    previous[j] = min_vertex;
                }
            }
        }
    }

    printf("Shortest distances from vertex %d:\n", start_vertex);

    for (int i = 0; i < graph->num_vertices; i++) {
        printf("Vertex %d: %d\n", i, distances[i]);
    }

    free(distances);
    free(previous);
    free(visited);
}

int main() {
    Graph graph;
    graph.num_vertices = 5;
    graph.num_edges = 7;
    graph.adjacency_matrix = (int*)malloc(graph.num_vertices * graph.num_vertices * sizeof(int));

    // Initialize adjacency matrix
    for (int i = 0; i < graph.num_vertices; i++) {
        for (int j = 0; j < graph.num_vertices; j++) {
            graph.adjacency_matrix[i * graph.num_vertices + j] = 0;
        }
    }

    // Add edges to graph
    graph.adjacency_matrix[0 * graph.num_vertices + 1] = 4;
    graph.adjacency_matrix[0 * graph.num_vertices + 2] = 2;
    graph.adjacency_matrix[1 * graph.num_vertices + 3] = 5;
    graph.adjacency_matrix[2 * graph.num_vertices + 1] = 1;
    graph.adjacency_matrix[2 * graph.num_vertices + 3] = 8;
    graph.adjacency_matrix[2 * graph.num_vertices + 4] = 10;
    graph.adjacency_matrix[3 * graph.num_vertices + 4] = 2;
    graph.adjacency_matrix[4 * graph.num_vertices + 0] = 6;

    dijkstra(&graph, 0);

    free(graph.adjacency_matrix);

    return 0;
}